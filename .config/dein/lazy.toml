# vim:ft=toml
# [[plugins]] # Plugin to easily access Most Recently Used (MRU) files
# repo = 'Shougo/neomru.vim'
# on_source = 'denite.nvim'
# on_path = '.*'

[[plugins]] # Yank
repo = 'Shougo/neoyank.vim'
on_source = 'denite.nvim'
on_event = 'TextYankPost'

[[plugins]] # Python completions
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

[[plugins]]
repo = 'davidhalter/jedi-vim'
on_ft = 'python'
hook_add = '''
    let g:jedi#completions_command = "<C-N>"

    " 補完で次の候補に進むときにtabを使えるという設定にしたつもりだが動かない
    let g:jedi#use_tabs_not_buffers = 1

    " 1個目の候補が入力されるっていう設定を解除
    let g:jedi#popup_select_first = 0

    " .を入力すると補完が始まるという設定を解除
    let g:jedi#popup_on_dot = 0

    let g:jedi#goto_command = "<leader>d"
    let g:jedi#goto_assignments_command = "<leader>g"
    let g:jedi#goto_definitions_command = ""
    let g:jedi#documentation_command = "K"
    let g:jedi#usages_command = "<leader>n"
    let g:jedi#rename_command = "<leader>r"

    " ポップアップを表示しない
    autocmd FileType python setlocal completeopt-=preview
'''

[[plugins]]
repo = 'neomake/neomake'
if = "has('nvim')"
hook_add = '''
autocmd! BufEnter,BufWritePost * Neomake
let g:neomake_python_enabled_makers = ['python', 'flake8', 'mypy']
'''

[[plugins]]  # Asynchronous Lint Engine
repo = 'w0rp/ale'
on_ft = ['python', 'sh', 'js', 'javascript', 'markdown', 'yaml']
hook_add= '''
" エラー行に表示するマーク
let g:ale_sign_error = '⨉'
let g:ale_sign_warning = '⚠'
" ステータスラインで表示するフォーマットを変更
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ OK']
" エラー行にカーソルをあわせた際に表示されるメッセージフォーマット
let g:ale_echo_msg_format = '[%linter%] %s [%severity%]'
" エラー表示の列を常時表示
let g:ale_sign_column_always = 1

" ファイルを開いたときにlint実行
let g:ale_lint_on_enter = 1
" ファイルを保存したときにlint実行
let g:ale_lint_on_save = 1
" 編集中のlintはしない
let g:ale_lint_on_text_changed = 'never'

" lint結果をロケーションリストではなくQuickfixに表示
let g:ale_set_loclist = 1
let g:ale_set_quickfix = 0
let g:ale_open_list = 0
let g:ale_keep_list_window_open = 0

" Disable completion where available.
let g:ale_completion_enabled = 1

" 有効にするlinter
" Require for textlint
" sudo npm install --global \
"          textlint \
"          textlint-rule-max-ten \
"          textlint-rule-spellcheck-tech-word \
"          textlint-rule-preset-japanese \
"          textlint-rule-no-mix-dearu-desumasu
let g:ale_linters = { 'python': ['flake8', 'pylint'],
                    \ 'sh': ['shellcheck'],
                    \ 'javascript': ['jshint'],
                    \ 'html': ['jshint'],
                    \ 'markdown': ['textlint'],
                    \ 'yaml': ['actionlint'],
                    \ }
                    " \ 'html': ['jshint', 'eslint'],
" Fix Python files with autopep8 and yapf.
let g:ale_fixers = { 'python': ['autopep8', 'yapf'],
                    " \ 'markdown': [
                    " \   {buffer, lines -> {
                    " \       'command': 'textlint -c ~/.textlintrc -o /dev/null --fix --no-color --quiet %t',
                    " \       'read_temporary_file': 1
                    " \       }
                    " \   }
                    " \ ],
                    \ }
                    " \ 'javascript': ['eslint'],

" Disable warnings about trailing whitespace for Python files.
let g:ale_warn_about_trailing_whitespace = 0
let g:ale_fix_on_save = 1

" ALE用プレフィックス
" nmap [ale] <Nop>
" map <C-q> [ale]
" エラー行にジャンプ
nmap <silent> <leader>k <Plug>(ale_previous_wrap)
nmap <silent> <leader>j <Plug>(ale_next_wrap)
'''

[[plugins]]  # Program runner
repo = 'thinca/vim-quickrun'
on_ft = ['python', 'sh', 'typescript']
hook_add = '''
    " vimprocで非同期実行
    " 成功時にバッファ、失敗時にQuickFixで表示
    " 結果表示のサイズ調整など
    let g:quickrun_config = {
        \ 'typescript' : {
            \ 'command' : 'tsc',
        \ },
        \ '_' : {
            \ 'runner' : 'vimproc',
            \ 'runner/vimproc/updatetime' : 40,
            \ 'outputter' : 'error',
            \ 'outputter/error/success' : 'quickfix',
            \ 'outputter/error/error'   : 'quickfix',
            \ 'outputter/buffer/split' : ':botright 8sp',
        \ }
    \}
    " 成功時に上書きするとき   'outputter/error/success' : 'buffer',
    " ただし :chistory に記録されない
    " 実行時に前回の表示内容をクローズ&保存してから実行
    let g:quickrun_no_default_key_mappings = 1
    nmap <Leader>b :QuickRun<CR>
'''

# go lang plugins
[[plugins]]  # go command use as vim command :GoBuild, :GoInstall

# EXECUTE `:GoInstallBinaries` AT FIRST!

# it's take a long time to go get some go sources & build them.

repo = 'fatih/vim-go'
on_ft = 'go'
if = '''executable('go')'''
hook_add = '''
    "  参考: https://github.com/hnakamur/vim-go-tutorial-ja

    " :nextなどでバッファ移動時にファイルが変更されていれば書き込む
    " :GoBuildするときにファイルを保存する必要がなくなる
    autocmd FileType go set autowrite

    " === VIM-GO COMMAND KEYBINDS ===
    " autocmd FileType go nmap <leader>b  <Plug>(go-build) " 下記に改善版
    autocmd FileType go nmap <leader>r <Plug>(go-run)
    " autocmd FileType go nmap <leader>t <Plug>(go-test)
    " leader tが効かなくなったので暫定処置
    autocmd FileType go nmap <leader>t :GoTest<CR>
    autocmd FileType go nmap <Leader>c <Plug>(go-coverage-toggle)
    autocmd FileType go nmap <Leader>l <Plug>(go-lint)
    " run :GoBuild or :GoTestCompile based on the go file
    function! s:build_go_files()
      let l:file = expand('%')
      if l:file =~# '^\f\+_test\.go$'
        call go#test#Test(0, 1)
      elseif l:file =~# '^\f\+\.go$'
        call go#cmd#Build(0)
      endif
    endfunction
    autocmd FileType go nmap <leader>b :<C-u>call <SID>build_go_files()<CR>

    " ファイル切り替え
    " チュートリアルのおすすめキーバインド
    autocmd Filetype go command! -bang A call go#alternate#Switch(<bang>0, 'edit')
    autocmd Filetype go command! -bang AV call go#alternate#Switch(<bang>0, 'vsplit')
    autocmd Filetype go command! -bang AS call go#alternate#Switch(<bang>0, 'split')
    autocmd Filetype go command! -bang AT call go#alternate#Switch(<bang>0, 'tabe')
    " 自分専用キーバインド(^とpが近いので)
    autocmd FileType go nmap <Leader>pp <Plug>(go-alternate-edit)
    autocmd FileType go nmap <Leader>ps <Plug>(go-alternate-split)
    autocmd FileType go nmap <Leader>pv <Plug>(go-alternate-vertical)
    autocmd FileType go nmap <Leader>d :!pkill main<CR>
    " tabに表示はない

    " [[, ]]: 次/前の関数に移動
    " (go組込関数上などで)K: :GoDocと同様

    " === VIM-GO OPTIONS ===
    " GoRunの結果をsplitで表示 Default->"vsplit"
    let g:go_term_mode = "split"

    " :GoFmt時にimportのチェック Default->gofmt
    " ファイルが巨大だと保存時の:GoFmtが遅くなるので消しましょう
    let g:go_fmt_command = "goimports"

    " "コメントも関数の一部として扱われたくないときは0に設定する Default=>1
    " let g:go_textobj_include_function_doc = 1

    " キャメルケースに変換(defalut snake_cake)
    let g:go_addtags_transform = "camelcase"

    " :GoMetaLinterで呼び出すコマンド Default->['vet', 'golint', 'errcheck']
    " let g:go_metalinter_enabled = ['vet', 'golint', 'errcheck']

    " 自動保存時にLinter有効化 Default->0
    let g:go_metalinter_autosave = 1

    " 自動保存時に走らせるLinter Default->['vet', 'golint']
    " let g:go_metalinter_autosave_enabled = ['vet', 'golint']

    " 自動保存時に走らせるLinterタイムアウト Default->"5s"
    " let g:go_metalinter_deadline = "5s"

    " :GoDef使用時に使うコマンド ['guru', 'godef'] guru使えないときはgodefに切り替える
    " Default->'guru
    " let g:go_def_mode = 'guru'

    " :GoDeclsはデフォルトで関数と型を表示する Default->"func,type"
    " 型だけにしたいときは"func"だけを指定
    " let g:go_decls_includes = "func,type"

    " カーソル上のワードに対して:GoInfo実行
    " let g:go_auto_type_info = 1
    " :GoInfo更新時間 Default->800
    " autocmd FileType go set updatetime=100
    " または:GoInfoのキーバインドを設定
    autocmd FileType go nmap <Leader>i <Plug>(go-info)

    " 同じIDをカーソルがワードに移動するごとにハイライト Default->0
    " let g:go_auto_sameids = 1
    " または:GoSameIdsToggleのキーバインドを設定
    autocmd FileType go nmap <Leader>s :GoSameIdsToggle<CR>

    " :GoPlayでページをブラウザに読み込まない Default->1
    let g:go_play_open_browser = 0

    " === Others ===
    " GoInstallBinaries: vim-goに必要なツールのインストール(go get がバックグラウンドで動いて大変時間がかかる)
    " GoUpdateBinaries: GoInstallBinariesで落としたツールのアップデート
    " GoImport: importパスの追加
    " GoImportAs: importパスの追加(パッケージ名変更)
    " GoDrop: importパスの削除
    " GoDef: ctagsジャンプと同じ(ショートカットキー<C-]>)
    " GoDecls: gtagsジャンプと同じ(ファイル内のみ対象) ctrlPやFZFと連携
    " GoDeclsdir: gtagsジャンプと同じ(ディレクトリ内の全ファイル対象)
    " GoReferrers: gtagsジャンプと似たようなもん？GoDeclsと違ってロケーションリストに表示
    " GoDescribe: フィールドの定義、メソッドの組と URL 構造体のフィールドが表示される
    " GoImplements: 型が実装しているインターフェースをロケーションリストに表示
    " GoWhicherrs: モードはエラーの型の値に現れうる可能な定数の組、グローバル変数、そして具象型を報告
    " GoCallees: 関数を呼び出す可能性のあるターゲットを表示
    " GoCallstack: 選択部分を含む関数へのコールグラフの根本からの任意のパスを表示
    " GoChannelPeers: チャンネルの送信先 / 受信先を表示
    " GoRename: GOPATH 以下にある全てのパッケージを検索してその識別子に依存している全ての識別子をリネーム
    " GoFreevars: どれだけ多くの変数に依存しているかを見る
    " GoGenarate: コード生成
    " GoImpl: インターフェースを実装するメソッドスタブの生成
    " GoPlay: コードをGo Playground に公開する(リンクはバッファかクリップボードにコピーされる)
'''

# Rust lang plugins
[[plugins]]
repo = 'rust-lang/rust.vim'
on_ft = 'rust'
if = '''executable('rustc')'''
hook_source = '''
    augroup MyRustCmd
        autocmd!
        autocmd FileType rust :nnoremap <buffer> <Leader>r :RustRun<CR>
        autocmd FileType rust :nnoremap <buffer> <Leader>R :RustRun!<CR>
        autocmd FileType rust :nnoremap <buffer> <Leader>t :Ctest<CR>
    augroup END

    let g:rustfmt_autosave = 1
    let g:rust_doc#define_map_K = 1
'''

[[plugins]]
repo = 'sebastianmarkow/deoplete-rust'
on_ft = 'rust'
if = '''executable('rustc')'''
on_source = ['deoplete.nvim']
hook_source = '''
let g:deoplete#sources#rust#racer_binary = $HOME . '/.cargo/bin/racer'
    let g:deoplete#sources#rust#rust_source_path = $HOME . '/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src'
    let $RUST_SRC_PATH = $HOME . '/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src'
    let g:deoplete#sources#rust#show_duplicates = 1
    let g:deoplete#sources#rust#disable_keymap = 1
    nmap <buffer> <leader>s <plug>DeopleteRustGoToDefinitionDefault
    nmap <buffer> K  <plug>DeopleteRustShowDocumentation
'''

# Nim lang plugins
[[plugins]]
repo = 'zah/nim.vim'
on_ft = ['nim', 'nimble']
if = '''executable('nim')'''''
hook_add = '''
fun! JumpToDef()
 if exists("*GotoDefinition_" . &filetype)
     call GotoDefinition_{&filetype}()
  else
    exe "norm! \<C-]>"
  endif
endf
" Jump to tag
nn <M-g> :call JumpToDef()<cr>
ino <M-g> <esc>:call JumpToDef()<cr>
'''

[[plugins]]
repo = 'prabirshrestha/asyncomplete.vim'
hook_add = '''
let g:asyncomplete_smart_completion = 1
let g:asyncomplete_auto_popup = 1
'''

[[plugins]]
repo = 'alaviss/nim.nvim'
on_ft = ['nim', 'nimble']
hook_add = '''
au User asyncomplete_setup call asyncomplete#register_source({
  \ 'name': 'nim',
  \ 'whitelist': ['nim'],
  \ 'completor': {opt, ctx -> nim#suggest#sug#GetAllCandidates(
  \     {start, candidates -> asyncomplete#complete(opt['name'], ctx, start, candidates)})}
  \ })
'''
