# vim:ft=toml
[[plugins]] # 補完
repo = 'Shougo/deoplete.nvim'
depends = 'context_filetype.vim'
on_event = 'InsertEnter'
hook_add = '''
    " Vim起動時にneocompleteを有効にする
    " Use deoplete.
    let g:deoplete#enable_at_startup = 1
    " Use smartcase.
    call deoplete#custom#option({
    \ 'auto_complete_delay': 200,
    \ 'smart_case': v:true,
    \ })

    " 区切り文字まで補完する
    let g:neocomplete#enable_auto_delimiter = 1
    " 1文字目の入力から補完のポップアップを表示
    let g:neocomplete#auto_completion_start_length = 1

    " <TAB>: completion.
    " imap <silent><expr> <TAB> pumvisible() ? "\<C-n>" : <SID>check_back_space() ? "\<TAB>" : deoplete#mappings#manual_complete()
    " タブキーで補完候補の選択. スニペット内のジャンプもタブキーでジャンプ
    imap <expr><TAB> pumvisible() ? "<C-n>" : neosnippet#jumpable() ? "<Plug>(neosnippet_expand_or_jump)" : "<TAB>"
    function! s:check_back_space() abort
        let col = col('.') - 1
        return !col || getline('.')[col - 1]  =~ '\s'
    endfunction

    " <S-TAB>: completion back.
    " inoremap <expr><S-TAB>  pumvisible() ? "\<C-p>" : "\<C-h>"

    " バックスペースで補完のポップアップを閉じる
    inoremap <expr><BS> neocomplete#smart_close_popup()."<C-h>"

    " エンターキーで補完候補の確定. スニペットの展開もエンターキーで確定
    imap <expr><CR> neosnippet#expandable() ? "<Plug>(neosnippet_expand_or_jump)" : pumvisible() ? "<C-y>" : "<CR>"
'''

[[plugins]] # unite.vim 後継
repo = 'Shougo/denite.nvim'
on_cmd = 'Denite'
depends = ['neomru.vim']
on_event = 'BufRead'
hook_add = '''
    " Prefix key
    nmap [denite] <Nop>
    map <C-j> [denite]

	" === Define mappings ===
	autocmd FileType denite call s:denite_my_settings()
	function! s:denite_my_settings() abort
	  nnoremap <silent><buffer><expr> <CR>
	  \ denite#do_map('do_action')
	  nnoremap <silent><buffer><expr> d
	  \ denite#do_map('do_action', 'delete')
	  nnoremap <silent><buffer><expr> p
	  \ denite#do_map('do_action', 'preview')
	  nnoremap <silent><buffer><expr> q
	  \ denite#do_map('quit')
	  nnoremap <silent><buffer><expr> i
	  \ denite#do_map('open_filter_buffer')
	  nnoremap <silent><buffer><expr> <Space>
	  \ denite#do_map('toggle_select').'j'
	endfunction

	autocmd FileType denite-filter call s:denite_filter_my_settings()
	function! s:denite_filter_my_settings() abort
	  imap <silent><buffer> <C-o> <Plug>(denite_filter_quit)
	endfunction

    nmap <silent> [denite]<C-f> :<C-u>Denite line<CR>
    nmap <silent> [denite]<C-e> :<C-u>DeniteCursorWord line<CR>

    " バッファからgrep
    nmap <silent> [denite]<C-g> :<C-u>Denite grep<CR>
    nmap <silent> [denite]<C-b> :<C-u>DeniteCursorWord grep<CR>

    " ファイルタイプが云々　不明
    nmap <silent> [denite]<C-t> :<C-u>Denite filetype<CR>
    " カレントディレクトリ以下のファイル
    nmap <silent> [denite]<C-n> :<C-u>Denite file/rec<CR>
    " ホームディレクトリ以下のファイル
    nmap <silent> [denite]. :<C-u>call denite#start([{'name': 'file/rec', 'args': ['~/']}])<CR>

    " バッファからファイル名検索
    nmap <silent> [denite]<C-p> :<C-u>Denite buffer<CR>
    nmap <silent> [denite]<C-o> :<C-u>Denite buffer -buffer-name=file file<CR>

    " アクセス率の高いファイルを開く
    nmap <silent> [denite]<C-j> :<C-u>Denite file_mru<CR>

    " 過去に開いたファイル(:oldfilesで表示される)を開く
    nmap <silent> [denite]<C-z> :<C-u>Denite file_old<CR>

    " 現在ディレクトリ以下のディレクトリからファイルを開く
    nmap <silent> [denite],     :<C-u>Denite directory_rec<CR>

    " よく行くディレクトリへ移動
    nmap <silent> [denite]<C-d> :<C-u>Denite directory_mru<CR>

    " yankで取り込んだバッファ検索
    nmap <silent> [denite]<C-y> :<C-u>Denite neoyank<CR>

    " help tag検索
    nmap <silent> [denite]<C-h> :<C-u>Denite help<CR>

    " Denite中断したDeniteの続き
    nmap <silent> [denite]<C-r> :<C-u>Denite -resume<CR>
    "以前のバッファで次の候補を即座に開く
    nmap <silent> [denite] ; :<C-u>Denite -resume -immediately -select=+1<CR>
    "以前のバッファで前の候補を即座に開く
    nmap <silent> <C-j>- :<C-u>Denite -resume -immediately -select=-1<CR>


    " === Denite中のkeymap ===
    "上下移動
    call denite#custom#map('insert', '<Down>', '<denite:move_to_next_line>', 'noremap')
    call denite#custom#map('insert', '<Up>', '<denite:move_to_previous_line>', 'noremap')
    call denite#custom#map('insert', '<C-j>', '<denite:move_to_next_line>', 'noremap')
    call denite#custom#map('insert', '<C-k>', '<denite:move_to_previous_line>', 'noremap')
    "split / tabで開く
    call denite#custom#map('insert', '<C-l>', '<denite:do_action:split>', 'noremap')
    call denite#custom#map('insert', '<C-v>', '<denite:do_action:vsplit>', 'noremap')
    call denite#custom#map('insert', '<C-t>', '<denite:do_action:tabopen>', 'noremap')

	" === Define alias ===
	call denite#custom#alias('source', 'file/rec/git', 'file/rec')
	call denite#custom#var('file/rec/git', 'command',
	      \ ['git', 'ls-files', '-co', '--exclude-standard'])

	call denite#custom#alias('source', 'file/rec/py', 'file/rec')
	call denite#custom#var('file/rec/py', 'command',
	\ ['scantree.py', '--path', ':directory'])

	" Change ignore_globs
	call denite#custom#filter('matcher/ignore_globs', 'ignore_globs',
	      \ [ '.git/', '.ropeproject/', '__pycache__/',
	      \   'venv/', 'images/', '*.min.*', 'img/', 'fonts/'])

    " === file/rec custom ===
    if executable('rg')
        call denite#custom#var('file/rec', 'command',
        \ ['rg', '--files', '--glob', '!.git'])
        " call denite#custom#var('file/rec', 'command', ['rg', '--files', '--hidden', '--glob', '!.git'])
    endif


    " === grep custom ===
    if executable('rg')
        call denite#custom#var('grep', 'command', ['rg'])
        call denite#custom#var('grep', 'recursive_opts', [])
        call denite#custom#var('grep', 'final_opts', [])
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'default_opts',
            \ ['--vimgrep', '--no-heading'])
        call denite#custom#var('grep', 'pattern_opt', ['--regexp'])
    elseif executable('pt')
        call denite#custom#var('grep', 'command', ['pt'])
        call denite#custom#var('grep', 'default_opts', ['--nogroup', '--nocolor', '--smart-case'])
        call denite#custom#var('grep', 'recursive_opts', [])
        call denite#custom#var('grep', 'pattern_opt', [])
        call denite#custom#var('grep', 'separator', ['--'])
        call denite#custom#var('grep', 'final_opts', [])
    elseif executable('ag')
        call denite#custom#var('file/rec', 'command',
            \ ['ag', '--follow', '--nocolor', '--nogroup', '-g', ''])
    endif

    call denite#custom#source('file_old', 'matchers',
          \ ['matcher_fuzzy', 'matcher_project_files'])
    call denite#custom#source('tag', 'matchers', ['matcher_substring'])
    call denite#custom#source('file_old', 'converters',
          \ ['converter_relative_word'])

    " 正規表現検索
    call denite#custom#map('insert', '<C-r>',
          \ '<denite:toggle_matchers:matcher_substring>', 'noremap')
    call denite#custom#map('insert', '<C-a>',
          \ '<denite:toggle_sorters:sorter_reverse>', 'noremap')
    call denite#custom#map('normal', 'r',
          \ '<denite:do_action:quickfix>', 'noremap')
    call denite#custom#map('insert', ';',
          \ 'vimrc#sticky_func()', 'expr')

    call denite#custom#alias('source', 'file/rec/git', 'file/rec')
    call denite#custom#var('file/rec/git', 'command',
          \ ['git', 'ls-files', '-co', '--exclude-standard'])

    call denite#custom#option('default', {
          \ 'auto_accel': v:true,
          \ 'prompt': '>',
          \ 'source_names': 'short',
          \ })

	" Add custom menus
	let s:menus = {}
	let s:menus.zsh = {
		\ 'description': 'Edit your import zsh configuration'
		\ }
	let s:menus.zsh.file_candidates = [
		\ ['zshrc', '~/.config/zsh/.zshrc'],
		\ ['zshenv', '~/.zshenv'],
		\ ]
	let s:menus.my_commands = {
		\ 'description': 'Example commands'
		\ }
	let s:menus.my_commands.command_candidates = [
		\ ['Split the window', 'vnew'],
		\ ['Open zsh menu', 'Denite menu:zsh'],
		\ ['Format code', 'FormatCode', 'go,python'],
		\ ]
'''

[[plugins]]  # Great asynchronous execution library
repo = 'Shougo/vimproc.vim'
build = 'make'

[[plugins]]  # denite.nvim source for GNU Global
repo = 'ozelentok/denite-gtags'
on_cmd = 'Denite'
hook_add = '''
    nnoremap [denite]a :DeniteCursorWord -buffer-name=gtags_context gtags_context<cr>
    nnoremap [denite]d :DeniteCursorWord -buffer-name=gtags_def gtags_def<cr>
    nnoremap [denite]r :DeniteCursorWord -buffer-name=gtags_ref gtags_ref<cr>
    nnoremap [denite]g :DeniteCursorWord -buffer-name=gtags_grep gtags_grep<cr>
    nnoremap [denite]t :Denite -buffer-name=gtags_completion gtags_completion<cr>
    nnoremap [denite]f :Denite -buffer-name=gtags_file gtags_file<cr>
    nnoremap [denite]p :Denite -buffer-name=gtags_path gtags_path<cr>
'''

[[plugins]]  # Yet Another Remote Plugin Framework for Neovim
repo = 'roxma/nvim-yarp'

 [[plugins]]  # compatibility layer for neovim rpc client working on vim8
 repo = 'roxma/vim-hug-neovim-rpc'
 depends='roxma/nvim-yarp'

[[plugins]]  # Dark powered plugin for Neovim/Vim to browse files
repo = 'Shougo/defx.nvim'
depends = ['roxma/nvim-yarp', 'roxma/vim-hug-neovim-rpc']
hook_add='''
    autocmd FileType defx call s:defx_my_settings()
    function! s:defx_my_settings() abort
        " Define mappings
        nnoremap <silent><buffer><expr> <CR>
        \ defx#do_action('open')
        nnoremap <silent><buffer><expr> c
        \ defx#do_action('copy')
        nnoremap <silent><buffer><expr> m
        \ defx#do_action('move')
        nnoremap <silent><buffer><expr> p
        \ defx#do_action('paste')
        nnoremap <silent><buffer><expr> l
        \ defx#do_action('open')
        nnoremap <silent><buffer><expr> E
        \ defx#do_action('open', 'vsplit')
        nnoremap <silent><buffer><expr> P
        \ defx#do_action('open', 'pedit')
        nnoremap <silent><buffer><expr> K
        \ defx#do_action('new_directory')
        nnoremap <silent><buffer><expr> N
        \ defx#do_action('new_file')
        nnoremap <silent><buffer><expr> d
        \ defx#do_action('remove')
        nnoremap <silent><buffer><expr> r
        \ defx#do_action('rename')
        nnoremap <silent><buffer><expr> x
        \ defx#do_action('execute_system')
        nnoremap <silent><buffer><expr> .
        \ defx#do_action('toggle_ignored_files')
        nnoremap <silent><buffer><expr> h
        \ defx#do_action('cd', ['..'])
        nnoremap <silent><buffer><expr> ~
        \ defx#do_action('cd')
        nnoremap <silent><buffer><expr> q
        \ defx#do_action('quit')
        nnoremap <silent><buffer><expr> <Space>
        \ defx#do_action('toggle_select') . 'j'
        nnoremap <silent><buffer><expr> *
        \ defx#do_action('toggle_select_all')
        nnoremap <silent><buffer><expr> j
        \ line('.') == line('$') ? 'gg' : 'j'
        nnoremap <silent><buffer><expr> k
        \ line('.') == 1 ? 'G' : 'k'
        nnoremap <silent><buffer><expr> <C-l>
        \ defx#do_action('redraw')
        nnoremap <silent><buffer><expr> <C-g>
        \ defx#do_action('print')
    endfunction
'''

[[plugins]]  # Visualizing your Vim undo tree.
repo = 'sjl/gundo.vim'
hook_add = '''
    if has('python3')
        let g:gundo_prefer_python3 = 1          " anything else breaks on Ubuntu 16.04+
    endif
    nnoremap <silent> <F4> :GundoToggle<CR>
'''

[[plugins]]  # Calculate mode
repo = 'fedorenchik/VimCalc3'
