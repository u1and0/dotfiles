# vim:ft=toml
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]  # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]  # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]]  # hybrid
repo = 'w0ng/vim-hybrid'

[[plugins]]  # vim-fugitive
repo = 'tpope/vim-fugitive'

[[plugins]]  # vim-gitgutter
repo = 'airblade/vim-gitgutter'
hook_add = '''
    " vim-gitgutter
    let g:gitgutter_sign_added = '✚'
    let g:gitgutter_sign_modified = '➜'
    let g:gitgutter_sign_removed = '✘'
'''

[[plugins]]  # Toml
repo = 'cespare/vim-toml'

[[plugins]]  # Japanese doc
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
    set helplang=ja,en
'''

[[plugins]]  # Multi-cursol keymap: g<C-N> (Just<C-N> corrade with YankRing)
repo = 'terryma/vim-multiple-cursors'

[[plugins]]  # Multi highlight
repo = 't9md/vim-quickhl'
hook_add = '''
    nmap <Leader>m <Plug>(quickhl-manual-this)
    xmap <Leader>m <Plug>(quickhl-manual-this)

    nmap <Leader>w <Plug>(quickhl-manual-this-whole-word)
    xmap <Leader>w <Plug>(quickhl-manual-this-whole-word)

    " nmap <Leader>c <Plug>(quickhl-manual-clear)
    " vmap <Leader>c <Plug>(quickhl-manual-clear)

    nmap <Leader>M <Plug>(quickhl-manual-reset)
    xmap <Leader>M <Plug>(quickhl-manual-reset)

    nmap <Leader>q <Plug>(quickhl-cword-toggle)
'''

[[plugins]]  # Commentout plugin use 'Ctrl+/(C-_)'
repo = 'tomtom/tcomment_vim'

[[plugins]]  # Show side bar "NERDTree"
repo = 'scrooloose/nerdtree'
hook_add = 'nnoremap <silent> <F5> :NERDTreeToggle<CR>'

[[plugins]]  # Session saveing ':Obsession'
repo = 'tpope/vim-obsession'

[[plugins]]  # Select then 'S'
repo = 'tpope/vim-surround'

[[plugins]]  # Repead surroud.vim
repo = 'tpope/vim-repeat'

[[plugins]]  # Auto-bracket correction
repo = 'jiangmiao/auto-pairs'

[[plugins]]  # Select increasingly larger regions of text using the same key combination
repo = 'terryma/vim-expand-region'
hook_add = '''
    vmap v <Plug>(expand_region_expand)
    vmap <C-v> <Plug>(expand_region_shrink)
'''

[[plugins]]  # python indent
repo = 'hynek/vim-python-pep8-indent'

# [[plugins]]  # Faster matcher. Needs cmake & boost: `pacman -S cmake boost`
# repo = 'nixprime/cpsm'
# build = 'env PY3=ON ./install.sh'

[[plugins]]  # 末尾の全角と半角の空白文字を赤くハイライト
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]  # インデントの可視化
repo = 'Yggdroot/indentLine'

[[plugins]]  # Python completions
repo = 'Shougo/neocomplcache'

[[plugins]]  # Python completions
repo = 'Shougo/neosnippet'
hook_add = '''
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB>
\ pumvisible() ? "\<C-n>" :
\ neosnippet#expandable_or_jumpable() ?
\    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
'''

[[plugins]]  # Python snippets completions
repo = 'Shougo/neosnippet-snippets'

[[plugins]]  # Allows you to use <Tab> for all your insert completion needs
repo = 'ervandew/supertab'  # Error occur
# repo = 'metalelf0/supertab'  # Fix error but doesn't work
hook_add = '''
    let g:SuperTabContextDefaultCompletionType = "context"
    let g:SuperTabDefaultCompletionType = "<C-n>"
'''

### Ctags / Gtags ###
[[plugins]]  # A class outline viewer for Vim
repo = 'majutsushi/tagbar'
hook_add = 'nmap <F8> :TagbarToggle<CR>'

# globalコマンドに細工してエラーの原因となっている可能性がある
# [[plugins]]  # Generate ctag/gtag
# repo = 'jsfaint/gen_tags.vim'
# hook_add = '''
#     let g:gen_tags#ctags_auto_gen = 1
#     let g:gen_tags#gtags_auto_gen = 1
# '''

[[plugins]] # ctags maker
repo = 'soramugi/auto-ctags.vim'
hook_add = '''
" Create at a Writing the file, default 0
let g:auto_ctags = 0
" Create the tags in directory, default .
" And stored in a directory that matches the first
let g:auto_ctags_directory_list = ['.git', '.svn']
" Create the tags name, default tags
let g:auto_ctags_tags_name = 'tags'
" Create the ctags args, default --tag-relative --recurse --sort=yes
let g:auto_ctags_tags_args = ['--tag-relative=yes', '--recurse=yes', '--sort=yes']
" Create the filetype tags --languages= option mode, default 0
let g:auto_ctags_filetype_mode = 1
'''

[[plugins]] # Fuzzy Finder for vim
repo = 'junegunn/fzf.vim'
hook_add = '''
    " <C-]>でタグ検索
    nnoremap <silent> [denite]<C-]> :call fzf#vim#tags(expand('<cword>'))<CR>
    " fzfからファイルにジャンプできるようにする
    let g:fzf_buffers_jump = 1
'''

[[plugins]]  # Add support for markdown files in tagbar
repo = 'jszakmeister/markdown2ctags'
hook_add = '''
    let g:tagbar_type_markdown = {
    \ 'ctagstype': 'markdown',
    \ 'ctagsargs' : '-f - --sort=yes',
    \ 'ctagsbin' : '$HOME/.local/share/dein/repos/github.com/jszakmeister/markdown2ctags/markdown2ctags.py',
    \ 'kinds' : [
        \ 's:sections',
        \ 'i:images'
    \ ],
    \ 'sro' : '|',
    \ 'kind2scope' : {
        \ 's' : 'section',
    \ },
    \ 'sort': 0,
    \ }
'''

[[plugins]]  # Manipulating Gist alternate in Vim
repo = 'lambdalisue/vim-gista'

[[plugins]]  # quickly find, substitute, and abbreviate several variations of a word at once.<Paste>
repo = 'tpope/vim-abolish'

[[plugins]]  # pairs of handy bracket mappings http://www.vim.org/scripts/script.php
# Add jump keybinds like ]b => :bn
repo = 'tpope/vim-unimpaired'
hook_add='''
    " Over write :cfirst, :clast :lfirst, :llast
    nnoremap <silent> ]Q :cnewer <CR>
    nnoremap <silent> [Q :colder <CR>
    nnoremap <silent> ]L :lnewer <CR>
    nnoremap <silent> [L :lolder <CR>
'''

[[plugins]]  # Yank History
repo = 'vim-scripts/YankRing.vim'
hook_add='''
    nnoremap <silent> <F9> :YRShow<CR>
    function! YRRunAfterMaps()
        nnoremap Y   :<C-U>YRYankCount 'y$'<CR>
    endfunction
'''

[[plugins]]  # HTML tag completion
repo = 'alvan/vim-closetag'

[[plugins]]  # Place, toggle and display marks.
repo = 'kshenoy/vim-signature'
hook_add='''
    nnoremap <silent> <F3> :SignatureListBufferMarks<CR>
'''

# ========Vim References========
[[plugins]]  # vim reference
repo = 'thinca/vim-ref'
hook_add = '''
let g:ref_detect_filetype         = {
            \    'css':        'phpmanual',
            \    'html':       ['phpmanual',  'javascript', 'jquery'],
            \    'javascript': ['javascript', 'jquery'],
            \    'php':        ['phpmanual',  'javascript', 'jquery']
            \}

" To download the phpmanual, type below on your shell.
" wget http://jp2.php.net/get/php_manual_ja.tar.gz/from/this/mirror ~/.local/share/dein/repos/github.com/thinca/vim-ref/mirror && aunpack mirror
let g:ref_phpmanual_path      = $HOME . '/.local/share/dein/repos/github.com/thinca/vim-ref/php-chunked-xhtml'
let g:ref_source_webdict_sites = {
            \   'wiktionary': {
            \     'url': 'http://ja.wiktionary.org/wiki/%s',
            \   },
            \   'kotobank': {
            \     'url': 'https://kotobank.jp/word/%s',
            \   },
            \   'kotobankej': {
            \     'url': 'https://kotobank.jp/ejword/%s',
            \   },
            \   'kotobankje': {
            \     'url': 'https://kotobank.jp/jeword/%s',
            \   },
            \   'weblio': {
            \     'url': 'https://ejje.weblio.jp/content/%s',
            \   },
            \   'jquery': {
            \     'url': 'https://api.jquery.com/%s/',
            \     'cache': 0,
            \   },
            \ }
" jqueryはmustardamus/jqapiの代わり

" Filter function
" 出力に対するフィルタ。最初と最後の数行を削除
function! g:ref_source_webdict_sites.wiktionary.filter(output)
      return join(split(a:output, "\n")[16 :], "\n")
endfunction
function! g:ref_source_webdict_sites.kotobank.filter(output)
      return join(split(a:output, "\n")[15 : -57], "\n")
endfunction
function! g:ref_source_webdict_sites.kotobankej.filter(output)
      return join(split(a:output, "\n")[21 : -35], "\n")
endfunction
function! g:ref_source_webdict_sites.kotobankje.filter(output)
      return join(split(a:output, "\n")[21 : -35], "\n")
endfunction
function! g:ref_source_webdict_sites.weblio.filter(output)
      return join(split(a:output, "\n")[20 : ], "\n")
endfunction
function! g:ref_source_webdict_sites.jquery.filter(output)
      return join(split(a:output, "\n")[51 : -131], "\n")
endfunction

" Option
let g:ref_source_webdict_sites.default = 'weblio'  " Ref webdict {word}で和英/和英検索
let g:ref_source_webdict_use_cache = 1
let g:ref_use_cache           = 1
let g:ref_cache_dir               = $HOME . '/.local/share/dein/repos/github.com/thinca/vim-ref/cache'
let g:ref_use_vimproc         = 1

" Keymap
nmap [Ref] <Nop>
map <C-k> [Ref]
" カレントワードをコマンドラインに貼り付け、カーソルを'webdict'の前に置く
" <CR>で即座に和英検索 or 別のリファレンスソースに変えてから検索
nnoremap [Ref] :Ref webdict <C-R><C-W><C-Left><Left>
vnoremap [Ref] y:Ref webdict <C-R>"<C-Left><Left>
" カレントワードを英和/和英検索
nnoremap [Ref]<C-K> :Ref webdict <C-R><C-W><CR>
vnoremap [Ref]<C-K> y:Ref webdict <C-R>"<CR>

" Refで開いたウィンドウではq でバッファを閉じる
augroup RefAutoCmd
    autocmd!
    autocmd RefAutoCmd FileType man,ref-* nnoremap <buffer> q <C-w>c<Paste>
augroup END

'''

[[plugins]]  # vim-ref sources (英辞郎, CPAN, jQAPI, コトバンク, Wikipedia)
repo = 'mojako/ref-sources.vim'
depends = 'thinca/vim-ref'
hook_add = '''
    " カレントワードをwikipedia検索
    nnoremap [Ref]<C-W> :Ref wikipedia <C-R><C-W><CR>
'''

[[plugins]]  # vim-ref sources (Answer.com, Reverso, Hyper Dictionary, Longman, Oxford Dictionaries, Synonym.com)
repo = 'mfumi/ref-dicts-en.git'
depends = 'thinca/vim-ref'

[[plugins]]  # javascript manual
repo = 'tokuhirom/jsref'
depends = 'thinca/vim-ref'
hook_add = '''
    let g:ref_javascript_doc_path = $HOME . '/.local/share/dein/repos/github.com/tokuhirom/jsref/htdocs'
'''

[[plugins]]  # jQuery manual
repo = 'mustardamus/jqapi'
depends = 'thinca/vim-ref'
hook_add = '''
    let g:ref_jquery_doc_path = $HOME . '/.local/share/dein/repos/github.com/mustardamus/jqapi'  " Dosn't work!!
'''

# Doesn't work
#  [[plugins]]  # `gS`: literal Split, `gJ`: literal Join
#  repo = 'AndrewRadev/splitjoin.vim'
#  hook_add = '''
#     set runtimepath+=~/.local/share/dein/repos/github.com/AndrewRadev/splitjoin.vim/ftplugin/*vim
#  '''

[[plugins]]  # CUI web browser
repo = 'yuratomo/w3m.vim'
hook_add = '''
    nnoremap <C-K><C-G> :W3mSplit <C-R>
    " 続けて<C-W>で word 貼り付け
    " 続けて<C-A>で WORD 貼り付け
    " 続けて"で バッファを貼り付け
    " :help <C-R> for more help
'''
if = '''executable('w3m')'''

# Language Server https://github.com/prabirshrestha/vim-lsp
[[plugins]]
repo = 'prabirshrestha/vim-lsp'

[[plugins]]
repo = 'mattn/vim-lsp-settings'
on_source = ['prabirshrestha/vim-lsp']
