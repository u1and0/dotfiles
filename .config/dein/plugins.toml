# vim:ft=toml
[[plugins]]
repo = 'Shougo/dein.vim'

[[plugins]]  # カーソル位置のコンテキストに合わせてftを切り替える
repo = 'osyo-manga/vim-precious'
depends = ['context_filetype.vim']

[[plugins]]  # カーソル位置のコンテキストのftを判定するライブラリ
repo = 'Shougo/context_filetype.vim'

[[plugins]]  # hybrid
repo = 'w0ng/vim-hybrid'

[[plugins]]  # vim-fugitive
repo = 'tpope/vim-fugitive'
hook_add = '''
    " Escape default <C-G> key bind
    nnoremap <C-g>g :file
    nnoremap <C-g>s :Git<CR>
    nnoremap <C-g>a :Git add %<CR>
    nnoremap <C-g>A :Git add .<CR>
    nnoremap <C-g>d :Gdiffsplit<CR>
    nnoremap <C-g>c :Git commit<CR>
    nnoremap <C-g>C :Git commit -a<CR>
    nnoremap <C-g>p :Git push<CR>
    " fugitiveで開いたウィンドウではq でバッファを閉じる
    augroup FugitiveCmd
        autocmd!
        autocmd FugitiveCmd FileType fugitive nnoremap <buffer> q <C-w>c<Paste>
    augroup END

'''

[[plugins]]  # vim-gitgutter
repo = 'airblade/vim-gitgutter'
hook_add = '''
    " vim-gitgutter
    let g:gitgutter_sign_added = '✚'
    let g:gitgutter_sign_modified = '➜'
    let g:gitgutter_sign_removed = '✘'
'''

[[plugins]]  # Toml
repo = 'cespare/vim-toml'

[[plugins]]  # Japanese doc
repo = 'vim-jp/vimdoc-ja'
hook_add = '''
    set helplang=ja,en
'''

[[plugins]]  # Multi-cursol keymap: g<C-N> (Just<C-N> corrade with YankRing)
repo = 'terryma/vim-multiple-cursors'

[[plugins]]  # Multi highlight
repo = 't9md/vim-quickhl'
hook_add = '''
    nmap <Leader>m <Plug>(quickhl-manual-this)
    xmap <Leader>m <Plug>(quickhl-manual-this)

    nmap <Leader>w <Plug>(quickhl-manual-this-whole-word)
    xmap <Leader>w <Plug>(quickhl-manual-this-whole-word)

    " nmap <Leader>c <Plug>(quickhl-manual-clear)
    " vmap <Leader>c <Plug>(quickhl-manual-clear)

    nmap <Leader>M <Plug>(quickhl-manual-reset)
    xmap <Leader>M <Plug>(quickhl-manual-reset)

    nmap <Leader>q <Plug>(quickhl-cword-toggle)
'''

[[plugins]]  # Commentout plugin use 'Ctrl+/(C-_)'
repo = 'tomtom/tcomment_vim'

[[plugins]]  # Show side bar "NERDTree"
repo = 'scrooloose/nerdtree'
hook_add = 'nnoremap <silent> <F5> :NERDTreeToggle<CR>'

[[plugins]]  # Session saveing ':Obsession'
repo = 'tpope/vim-obsession'

[[plugins]]  # Select then 'S'
repo = 'tpope/vim-surround'

[[plugins]]  # Repead surroud.vim
repo = 'tpope/vim-repeat'

[[plugins]]  # Auto-bracket correction
repo = 'jiangmiao/auto-pairs'

[[plugins]]  # Select increasingly larger regions of text using the same key combination
repo = 'terryma/vim-expand-region'
hook_add = '''
    vmap v <Plug>(expand_region_expand)
    vmap <C-v> <Plug>(expand_region_shrink)
'''

[[plugins]]  # python indent
repo = 'hynek/vim-python-pep8-indent'

# [[plugins]]  # Faster matcher. Needs cmake & boost: `pacman -S cmake boost`
# repo = 'nixprime/cpsm'
# build = 'env PY3=ON ./install.sh'

[[plugins]]  # 末尾の全角と半角の空白文字を赤くハイライト
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]  # インデントの可視化
repo = 'Yggdroot/indentLine'

[[plugins]]  # Python completions
repo = 'Shougo/neocomplcache'

[[plugins]]  # Python completions
repo = 'Shougo/neosnippet'
hook_add = '''
" Plugin key-mappings.
imap <C-k>     <Plug>(neosnippet_expand_or_jump)
smap <C-k>     <Plug>(neosnippet_expand_or_jump)
xmap <C-k>     <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB>
\ pumvisible() ? "\<C-n>" :
\ neosnippet#expandable_or_jumpable() ?
\    "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
\ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"

" For conceal markers.
if has('conceal')
  set conceallevel=2 concealcursor=niv
endif
'''

[[plugins]]  # Python snippets completions
repo = 'Shougo/neosnippet-snippets'

[[plugins]]  # Allows you to use <Tab> for all your insert completion needs
repo = 'ervandew/supertab'  # Error occur
# repo = 'metalelf0/supertab'  # Fix error but doesn't work
hook_add = '''
    let g:SuperTabContextDefaultCompletionType = "context"
    let g:SuperTabDefaultCompletionType = "<C-n>"
'''

### Ctags / Gtags ###
[[plugins]]  # A class outline viewer for Vim
repo = 'majutsushi/tagbar'
hook_add = 'nmap <F8> :TagbarToggle<CR>'

# globalコマンドに細工してエラーの原因となっている可能性がある
# [[plugins]]  # Generate ctag/gtag
# repo = 'jsfaint/gen_tags.vim'
# hook_add = '''
#     let g:gen_tags#ctags_auto_gen = 1
#     let g:gen_tags#gtags_auto_gen = 1
# '''

[[plugins]] # ctags maker
repo = 'soramugi/auto-ctags.vim'
hook_add = '''
" Create at a Writing the file, default 0
let g:auto_ctags = 0
" Create the tags in directory, default .
" And stored in a directory that matches the first
let g:auto_ctags_directory_list = ['.git', '.svn']
" Create the tags name, default tags
let g:auto_ctags_tags_name = 'tags'
" Create the ctags args, default --tag-relative --recurse --sort=yes
let g:auto_ctags_tags_args = ['--tag-relative=yes', '--recurse=yes', '--sort=yes']
" Create the filetype tags --languages= option mode, default 0
let g:auto_ctags_filetype_mode = 1
'''

[[plugins]] # Fuzzy Finder for vim
repo = 'junegunn/fzf.vim'
hook_add = '''
    nmap [denite] <Nop>
    map <C-j> [denite]
    " <C-]>でタグ検索
    nnoremap <silent> [denite]<C-]> :call fzf#vim#tags(expand('<cword>'))<CR>
    " fzfからファイルにジャンプできるようにする
    let g:fzf_buffers_jump = 1
    nnoremap <silent> [denite]<C-j> :Buffers<CR>
    nnoremap <silent> [denite]<C-h> :History<CR>
    nnoremap <silent> [denite]<C-k> :FZF<CR>
    nnoremap <silent> [denite]<C-l> :Lines<CR>
'''

[[plugins]]  # Add support for markdown files in tagbar
repo = 'jszakmeister/markdown2ctags'
hook_add = '''
    let g:tagbar_type_markdown = {
    \ 'ctagstype': 'markdown',
    \ 'ctagsargs' : '-f - --sort=yes',
    \ 'ctagsbin' : '$HOME/.local/share/dein/repos/github.com/jszakmeister/markdown2ctags/markdown2ctags.py',
    \ 'kinds' : [
        \ 's:sections',
        \ 'i:images'
    \ ],
    \ 'sro' : '|',
    \ 'kind2scope' : {
        \ 's' : 'section',
    \ },
    \ 'sort': 0,
    \ }
'''

[[plugins]]  # Manipulating Gist alternate in Vim
repo = 'lambdalisue/vim-gista'

[[plugins]]  # quickly find, substitute, and abbreviate several variations of a word at once.<Paste>
repo = 'tpope/vim-abolish'

[[plugins]]  # pairs of handy bracket mappings http://www.vim.org/scripts/script.php
# Add jump keybinds like ]b => :bn
repo = 'tpope/vim-unimpaired'
hook_add='''
    " Over write :cfirst, :clast :lfirst, :llast
    nnoremap <silent> ]Q :cnewer <CR>
    nnoremap <silent> [Q :colder <CR>
    nnoremap <silent> ]L :lnewer <CR>
    nnoremap <silent> [L :lolder <CR>
'''

[[plugins]]  # Yank History
repo = 'vim-scripts/YankRing.vim'
hook_add='''
    nnoremap <silent> <F9> :YRShow<CR>
    function! YRRunAfterMaps()
        nnoremap Y   :<C-U>YRYankCount 'y$'<CR>
    endfunction
'''

[[plugins]]  # HTML tag completion
repo = 'alvan/vim-closetag'

[[plugins]]  # Place, toggle and display marks.
repo = 'kshenoy/vim-signature'
hook_add='''
    nnoremap <silent> <F3> :SignatureListBufferMarks<CR>
'''

# ========Vim References========
[[plugins]]  # vim reference
repo = 'thinca/vim-ref'
hook_add = '''
let g:ref_detect_filetype         = {
            \    'css':        'phpmanual',
            \    'html':       ['phpmanual',  'javascript', 'jquery'],
            \    'javascript': ['javascript', 'jquery'],
            \    'php':        ['phpmanual',  'javascript', 'jquery'],
            \    'typescript': ['denodoc',  'javascript', 'jquery']
            \}

" To download the phpmanual, type below on your shell.
" wget http://jp2.php.net/get/php_manual_ja.tar.gz/from/this/mirror ~/.local/share/dein/repos/github.com/thinca/vim-ref/mirror && aunpack mirror
let g:ref_phpmanual_path      = $HOME . '/.local/share/dein/repos/github.com/thinca/vim-ref/php-chunked-xhtml'
let g:ref_source_webdict_sites = {
            \   'wiktionary': {
            \     'url': 'http://ja.wiktionary.org/wiki/%s',
            \   },
            \   'kotobank': {
            \     'url': 'https://kotobank.jp/word/%s',
            \   },
            \   'kotobankej': {
            \     'url': 'https://kotobank.jp/ejword/%s',
            \   },
            \   'kotobankje': {
            \     'url': 'https://kotobank.jp/jeword/%s',
            \   },
            \   'weblio': {
            \     'url': 'https://ejje.weblio.jp/content/%s',
            \   },
            \   'jquery': {
            \     'url': 'https://api.jquery.com/%s/',
            \     'cache': 0,
            \   },
            \   'denodoc': {
            \     'url': 'https://doc.deno.land/https://deno.land/%s',
            \   },
            \ }
" jqueryはmustardamus/jqapiの代わり

" Filter function
" 出力に対するフィルタ。最初と最後の数行を削除
function! g:ref_source_webdict_sites.wiktionary.filter(output)
      return join(split(a:output, "\n")[16 :], "\n")
endfunction
function! g:ref_source_webdict_sites.kotobank.filter(output)
      return join(split(a:output, "\n")[15 : -57], "\n")
endfunction
function! g:ref_source_webdict_sites.kotobankej.filter(output)
      return join(split(a:output, "\n")[21 : -35], "\n")
endfunction
function! g:ref_source_webdict_sites.kotobankje.filter(output)
      return join(split(a:output, "\n")[21 : -35], "\n")
endfunction
function! g:ref_source_webdict_sites.weblio.filter(output)
      return join(split(a:output, "\n")[20 : ], "\n")
endfunction
function! g:ref_source_webdict_sites.jquery.filter(output)
      return join(split(a:output, "\n")[51 : -131], "\n")
endfunction

" Option
let g:ref_source_webdict_sites.default = 'weblio'  " Ref webdict {word}で和英/和英検索
let g:ref_source_webdict_use_cache = 1
let g:ref_use_cache           = 1
let g:ref_cache_dir               = $HOME . '/.local/share/dein/repos/github.com/thinca/vim-ref/cache'
let g:ref_use_vimproc         = 0

" Keymap
nmap [Ref] <Nop>
map <C-k> [Ref]
" カレントワードをコマンドラインに貼り付け、カーソルを'webdict'の前に置く
" <CR>で即座に和英検索 or 別のリファレンスソースに変えてから検索
nnoremap [Ref] :Ref webdict <C-R><C-W><C-Left><Left>
vnoremap [Ref] y:Ref webdict <C-R>"<C-Left><Left>
" カレントワードを英和/和英検索
nnoremap [Ref]<C-K> :Ref webdict <C-R><C-W><CR>
vnoremap [Ref]<C-K> y:Ref webdict <C-R>"<CR>

" Refで開いたウィンドウではq でバッファを閉じる
augroup RefAutoCmd
    autocmd!
    autocmd RefAutoCmd FileType man,ref-* nnoremap <buffer> q <C-w>c<Paste>
augroup END

'''

[[plugins]]  # vim-ref sources (英辞郎, CPAN, jQAPI, コトバンク, Wikipedia)
repo = 'mojako/ref-sources.vim'
depends = 'thinca/vim-ref'
hook_add = '''
    " カレントワードをwikipedia検索
    nnoremap [Ref]<C-W> :Ref wikipedia <C-R><C-W><CR>
'''

[[plugins]]  # vim-ref sources (Answer.com, Reverso, Hyper Dictionary, Longman, Oxford Dictionaries, Synonym.com)
repo = 'mfumi/ref-dicts-en.git'
depends = 'thinca/vim-ref'

[[plugins]]  # javascript manual
repo = 'tokuhirom/jsref'
depends = 'thinca/vim-ref'
hook_add = '''
    let g:ref_javascript_doc_path = $HOME . '/.local/share/dein/repos/github.com/tokuhirom/jsref/htdocs'
'''

[[plugins]]  # jQuery manual
repo = 'mustardamus/jqapi'
depends = 'thinca/vim-ref'
hook_add = '''
    let g:ref_jquery_doc_path = $HOME . '/.local/share/dein/repos/github.com/mustardamus/jqapi'  " Dosn't work!!
'''

# Doesn't work
#  [[plugins]]  # `gS`: literal Split, `gJ`: literal Join
#  repo = 'AndrewRadev/splitjoin.vim'
#  hook_add = '''
#     set runtimepath+=~/.local/share/dein/repos/github.com/AndrewRadev/splitjoin.vim/ftplugin/*vim
#  '''

[[plugins]]  # CUI web browser
repo = 'yuratomo/w3m.vim'
hook_add = '''
    nnoremap <C-K><C-G> :W3mSplit <C-R><C-W><CR>
    vnoremap <C-K><C-G> "9y:W3mSplit <C-R>9<CR>
    " 続けて<C-W>で word 貼り付け
    " 続けて<C-A>で WORD 貼り付け
    " 続けて"で バッファを貼り付け
    " :help <C-R> for more help
'''
if = '''executable('w3m')'''

# Language Server https://github.com/prabirshrestha/vim-lsp
[[plugins]]
repo = 'prabirshrestha/vim-lsp'
hook_add = '''
    nmap [lsp] <Nop>
    map <C-l> [lsp]
    function! s:on_lsp_buffer_enabled() abort
        setlocal omnifunc=lsp#complete
        setlocal signcolumn=yes
        if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
        " 定義元をqfに表示
        nmap <buffer> [lsp]d <plug>(lsp-definition)
        " 定義をfuzzy-find で検索"
        nmap <buffer> [lsp]s <plug>(lsp-document-symbol-search)
        nmap <buffer> [lsp]S <plug>(lsp-workspace-symbol-search)
        " 使用されている部分をqfに表示
        nmap <buffer> [lsp]r <plug>(lsp-references)
        " 定義元をqfに表示
        nmap <buffer> [lsp]i <plug>(lsp-implementation)
        nmap <buffer> [lsp]t <plug>(lsp-type-definition)
        nmap <buffer> [lsp]r <plug>(lsp-rename)
        nmap <buffer> [g <plug>(lsp-previous-diagnostic)
        nmap <buffer> ]g <plug>(lsp-next-diagnostic)
        " docstring 表示
        nmap <buffer> K <plug>(lsp-hover)
        nnoremap <buffer> [lsp]<c-f> lsp#scroll(+4)
        nnoremap <buffer> [lsp]<c-d> lsp#scroll(-4)

        let g:lsp_format_sync_timeout = 1000
        autocmd! BufWritePre *.rs,*.go,*.ts call execute('LspDocumentFormatSync')
        " refer to doc to add more commands
    endfunction

    augroup lsp_install
        au!
        " call s:on_lsp_buffer_enabled only for languages that has the server registered.
        autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
    augroup END
'''

[[plugins]]
repo = 'mattn/vim-lsp-settings'
on_source = ['prabirshrestha/vim-lsp']

[[plugins]]
repo = "mattn/webapi-vim"

[[plugins]]
repo = 'ryicoh/deepl.vim'
hook_add = '''
    let g:deepl#endpoint = "https://api-free.deepl.com/v2/translate"
    let g:deepl#auth_key = $DEEPL_API_KEY

    " replace a visual selection
    vmap t<C-e> <Cmd>call deepl#v("EN")<CR>
    vmap t<C-j> <Cmd>call deepl#v("JA")<CR>

    " translate a current line and display on a new line
    nmap t<C-e> yypV<Cmd>call deepl#v("EN")<CR>
    nmap t<C-j> yypV<Cmd>call deepl#v("JA")<CR>

    " specify the source language
    " translate from FR to EN
    " nmap t<C-e> yypV<Cmd>call deepl#v("EN", "FR")<CR>
'''

[[plugins]]
repo = 'u1and0/gpt-cli'
build = "./install.sh"
hook_add = '''
    let s:model = 'gemini-2.5-flash-preview-05-20' " 'gemini-2.0-flash' 'claude-3-5-haiku-20241022'
    let s:code_model =  'claude-sonnet-4-0'  " 'gpt-4.1-mini' 'claude-3-7-sonnet-latest'
    let s:reasoning_model = 'groq/deepseek-r1-distill-llama-70b'
    let s:pro_model = 'gemini-2.5-pro-preview-05-06'
    let s:lite_model = 'gemini-2.0-flash-lite'
    let s:llama = 'groq/meta-llama/llama-4-scout-17b-16e-instruct'
    let s:pro_llama = 'groq/meta-llama/llama-4-maverick-17b-128e-instruct'
    let s:url = 'http://localhost:11434'

    command! -nargs=0 -range GPTGenerateCode <line1>,<line2>call gptcli#GPT('You are best of code generator. Generate a prompt to continue coding based on the given input code. Generate only code effectively, DO NOT generate descriptions nor code blocks. If you need describe code, please comment out it.', { 'max_tokens': 500, 'temperature': 0.5, 'model': s:llama})
    " Keybind C-X, C-G
    inoremap <C-x><C-g> <Esc>:.-5,.+5GPTGenerateCode<CR>
    " Docs to code
    command! -nargs=0 -range GPTGenerateDocs <line1>,<line2>call gptcli#GPT('あなたの仕事は、提供されたコード スニペットを取り出し、シンプルでわかりやすい言葉で説明することです。コードの機能、目的、主要コンポーネントを分析します。最小限のコーディング知識を持つ人でも説明が理解できるように、例え話、例、わかりやすい用語を使用します。どうしても必要な場合を除き、専門用語の使用を避け、使用される専門用語については明確な説明を提供します。目標は、コードが何をするのか、そしてそれが高レベルでどのように機能するのかを読者が理解できるようにすることです。', {"max_tokens": 2000, "model": s:model})
    " Create test code
    command! -nargs=0 -range GPTGenerateTest <line1>,<line2>call gptcli#GPT('You are the best code tester. Please write test code that covers all cases to try the given code.', { "temperature": 0.5, "model": s:llama})
    command! -nargs=0 -range GPTErrorBustor <line1>,<line2>call gptcli#GPT('Your task is to analyze the provided code snippet, identify any bugs or errors present, and provide a corrected version of the code that resolves these issues. Explain the problems you found in the original code and how your fixes address them. The corrected code should be functional, efficient, and adhere to best practices in programming.', {"temperature": 0.5, "model": s:pro_model})
    command! -nargs=0 -range GPTCodeOptimizer <line1>,<line2>call gptcli#GPT("Your task is to analyze the code snippet and suggest improvements to optimize its performance. Identify areas where the code can be made more efficient, faster, or less resource-intensive. Provide specific suggestions for optimization, along with explanations of how these changes can enhance the code’s performance. The optimized code should maintain the same functionality as the original code while demonstrating improved efficiency.", { "model": s:code_model, "temperature": 0.2})
    command! -nargs=0 -range GPTShaper <line1>,<line2>call gptcli#GPT("Format the code without rewriting the content of the code. Do not explain the code.", { "model": s:lite_model, "temperature": 0})

    " Any system prompt
    command! -nargs=? -range GPTComplete <line1>,<line2>call gptcli#GPT(<q-args> . 'Generate the [programming language] code for [task description]. Provide only the code, with short, concise comments explaining key sections. Avoid lengthy explanations."', { 'model': s:llama, 'max_tokens': 500})
    " command! -nargs=? -range GPTComplete <line1>,<line2>call gptcli#GPT(<f-args>, {'model': 'llama3.2:1b', 'url': 'http://localhost:11434' })

    " Conversate with GPT
    command! -nargs=? GPTChat call gptcli#GPTWindow(<q-args>, {'model': s:model})
    command! -nargs=? GPTChatPro call gptcli#GPTWindow(<q-args>, {'model': s:pro_llama})
    command! -nargs=? GPTChatReasoning call gptcli#GPTWindow(<q-args>, {'model': s:reasoning_model})

    " With systemp prompt
    command! -nargs=? GPTChatGenerateTest call gptcli#GPTWindow('You are the best code tester. Please write test code that covers all cases to try the given code.', {'model': s:pro_llama, "temperature": 0.1})
    command! -nargs=? GPTChatErrorBustor call gptcli#GPTWindow('Your task is to analyze the provided code snippet, identify any bugs or errors present, and provide a corrected version of the code that resolves these issues. Explain the problems you found in the original code and how your fixes address them. The corrected code should be functional, efficient, and adhere to best practices in programming.', {'model': s:reasoning_model, "temperature": 0.5})
    command! -nargs=? GPTChatCodeOptimizer call gptcli#GPTWindow('Your task is to analyze the code snippet and suggest improvements to optimize its performance. Identify areas where the code can be made more efficient, faster, or less resource-intensive. Provide specific suggestions for optimization, along with explanations of how these changes can enhance the code’s performance. The optimized code should maintain the same functionality as the original code while demonstrating improved efficiency.', {'model': s:reasoning_model, "temperature": 0.2})
    command! -nargs=? GPTChatWizard call gptcli#GPTWindow(<q-args>, 'あなたは偉大な老魔術師であり、Linuxエンジニアです。コマンドを魔術に見立てて、儀式を弟子に伝授する形式で質問に答えるのじゃ。' , {'model': s:pro_llama, 'temperature': 1.04})
    command! -nargs=? GPTChatSocrates call gptcli#GPTWindow('あなたは幅広いトピックについてソクラテス式の深い対話ができるAIアシスタントです。ユーザーが自身の信念や視点を批判的に検討できるよう、探求的な質問をすることがあなたの目標です。単に自分の見解を述べるのではなく、より深い思考と省察を促すために質問のやり取りを行ってください。', {'model': s:reasoning_model})

    " Conversate with file content
    command! -nargs=* GPTChatWithFile call gptcli#GPTWindow(<f-args>, {'model': s:model})
'''

[[plugins]]
repo = 'vim-denops/denops.vim'
hook_add = '''
    set runtimepath^=~/Drpobox/Program/deno/dps-helloworld
    let g:denops#debug = 1
'''
